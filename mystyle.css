body {
    background-color: linen;
    background-image: url("paper.gif");
    background-repeat: repeat-x; /*只往x方向重複*/
    background-repeat: no-repeat; /*不重複*/
    background-position: right top;/*在用上*/
    background-attachment: fixed; /*會一直固定在那邊*/ 
    /*background: #ffffff url("img_tree.png") no-repeat right top;/*Background - Shorthand property 類似簡寫*/
    }
    
h1 {
     color: maroon;
     margin-left: 40px;
} 

p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.solid {border-style: solid;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
 p.none {border-style: none;}
p.hidden {border-style: hidden;}
p.mix {border-style: dotted dashed solid double;}
p.one {
border-style: solid;
border-width: 5px;
}

p.two {
border-style: solid;
border-width: medium;
}

p.three {
border-style: dotted;
border-width: 2px;
}

p.four {
border-style: dotted;
border-width: thick;
}

p.five {
border-style: double;
border-width: 15px;
}

p.six {
border-style: double;
border-width: thick;
}

p.top { /*如果只要上面其他也要設*/
    border-top-style: dotted;
    border-top-width: 4px;
    border-top-color: red;
}
 
p.seven { /*綜合運用*/
border-top-style: dotted;
border-right-style: solid;
border-bottom-style: dashed;
border-left-style: groove;/*border-style: dotted solid dashed groove;*/
border-width: 2px 10px 4px 20px;
border-color: red green blue yellow;
border-radius: 5px;

}

div.margin_shorthand {
    border: 1px solid black;
    margin: 25px 50px 75px 100px; /* margin-top: 100px;margin-bottom: 100px;margin-right: 150px;margin-left: 80px;*/
    background-color: lightblue;
}

div.margin_auto{
    width:300px;
    margin: auto;
    border: 1px solid red;
}

div.margin_inherit {
    border: 1px solid red;
    margin-left: 100px;
}

p.margin_inherit {  /*繼承div.margin_inherit 的margin-left屬性*/
    margin-left: inherit;
}

h1.margin_collapse{
    margin: 0 0 50px 0;
}

h2.margin_collapse{ /*h1.collapse + h2.collapse 的margin因為collaspe的關係只會有50px;*/
    margin: 30px 0 0 0;
}

div.padiing_shorthand {
    border: 1px solid black;
    padding: 25px 50px 75px 100px; /* padding-top: 50px;padding-right: 30px;padding-bottom: 50px;padding-left: 80px;
    如果有哪個方向沒寫到,就跟對稱的那邊一樣*/
    background-color: lightblue;
}

div.padiing_width {
    width: 300px;
    padding: 25px;
    background-color: lightblue;


    box-sizing: border-box;
} /*這塊div的寬會變成300+25+25=350px; 但是加上box-sizing: border-box; 就可以讓他維持在寬度300px;變成讓高度增加*/

div.height {
    height: 100px;
    width: 500px;
    background-color: powderblue;
}/*The height and width properties do not include padding, borders, or margins;
 When you set the width and height properties of an element with CSS, 
 you just set the width and height of the content area. To calculate the full size of an element, 
 you must also add padding, borders and margins.*/

 p {outline-color:red;}

p.dotted {outline-style: dotted;}
p.dashed {outline-style: dashed;}
p.solid {outline-style: solid;}
p.double {outline-style: double;}
p.groove {outline-style: groove;}
p.ridge {outline-style: ridge;}
p.inset {outline-style: inset;}
p.outset {outline-style: outset;}

p.OutlineColor {
    border: 1px solid black;
    outline-style: double;
    outline-color: green;
}
p.OutlineWidth{
    border: 1px solid black;
    outline-style: solid;
    outline-color: red;
    outline-width: medium;
}
p.Shorthandproperty {outline: 5px solid yellow;}

p.OutlineOffset {
    margin: 30px;
    border: 1px solid black;
    outline: 1px solid red;
    outline-offset: 15px;
}
p.Outlineinvert {
    border: 1px solid yellow;
    outline-style: solid;
    outline-color: invert;
}

div.justify {
    border: 1px solid black;
    padding: 10px;
    width: 200px;
    height: 200px;
    text-align: justify;
}
h1.overline {
    text-decoration: overline;
}
h2.line-through {
    text-decoration: line-through;
}
h3.underline{
    text-decoration: underline;
}
p.uppercase {
    text-transform: uppercase;
}
p.lowercase {
    text-transform: lowercase;
}
p.capitalize {
    text-transform: capitalize;
}
p.text-indent {
    text-indent: 30px;
}
h1.letter-spacing {
    letter-spacing: 3px;
}
h2.letter-spacing {
    letter-spacing: -3px;
}
p.small {
    line-height: 0.7;
}
p.big {
    line-height: 1.8;
}
p.direction {
    direction: rtl;
}
h1.word-spacing {
    word-spacing: 10px;
}

h2.word-spacing {
    word-spacing: -5px;
}
h1.text-shadow {
    text-shadow: 3px 2px red;
}
p.serif {
    font-family: "Times New Roman", Times, serif;
}

p.sansserif {
    font-family: Arial, Helvetica, sans-serif;
}
p.normal {
    font-style: normal;
}

p.italic {
    font-style: italic;
}

p.oblique {
    font-style: oblique;
}
h1.fontsizepx {
    font-size: 40px;
}
h1.fontsizeem {
    font-size: 2.5em; /* 40px/16=2.5em */
}

p.normal {
    font-weight: normal;
}

p.light {
    font-weight: lighter;
}

p.thick {
    font-weight: bold;
}

p.thicker {
    font-weight: 800;
}

p.normal {
    font-variant: normal;
}

p.small {
    font-variant: small-caps;}/*In a small-caps font, all lowercase letters
     are converted to uppercase letters. However, the converted uppercase letters 
     appears in a smaller font size thanthe original uppercase letters in the text.*/

a.acolor {
    color: hotpink;
}

a:link {
    color: red;
    background-color: yellow;
    text-decoration: none;
}

/* visited link */
a:visited {
    color: green;
    background-color: cyan;
    text-decoration: none;
}

/* mouse over link */

a:hover {
    color: hotpink; 
    background-color: lightgreen;
    text-decoration: underline;
    /*Note: a:hover MUST come after a:link and a:visited in the 
    CSS definition in order to be effective.*/

}
/* selected link */
a:active {
    color: blue;
    background-color: hotpink;
    text-decoration: underline;
    /*Note: a:active MUST come after a:hover in the 
    CSS definition in order to be effective.*/
}

a:link, a:visited { /*button效果link*/
    background-color: #f44336;
    color: white;
    padding: 14px 25px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
}


a:hover, a:active {
    background-color: red;
}
table,th,td{
    
    border: 1px solid black;
}
table {
    border-collapse: collapse; /*只有一條線的框*/
    width: 10%;
}

th {
    height: 50px;
    text-align: left; /*置左*/
    padding: 15px;
}
td{
height: 50px;
padding: 15px;
vertical-align: bottom; /*在td內的字置底*/
}

table.border-bottom {
    border-collapse: collapse;
    width: 100%;
   
}

.border-bottom th,.border-bottom td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;/*底線分隔線 horizontal dividers*/
    
}
tr:hover {background-color:#f5f5f5;}  
tr:nth-child(even) {background-color: #f2f2f2;}
tr:nth-child(odd) {background-color: rgb(13, 6, 41);color:white;}


li.imgli {
    display: inline;
}/*Setting the display property of an element only changes how the element is displayed,
 NOT what kind of element it is. So, an inline element with display: block; 
 is not allowed to have other block elements inside it.
 變成並排*/
 span.displayblock {
    display: block; /*變有換行*/
    border:1px solid red;
}

a.displayblock{
    display: block; /*範圍會變一成一整條條*/
    border:1px solid red;
}

h1.hiddennone { /*隱藏*/ 
    display: none;
}
h1.hiddenvisibility { 
    /*However, the element will still take up the same space as before. 
    The element will be hidden, but still affect the layout:*/
    visibility: hidden;
}

div.width {
    width:500px;
    margin: auto;
    border: 3px solid #73AD21;
}

div.max_width {
    max-width:500px; /*最大500但是會配合螢幕大小縮放*/
    margin: auto;
    border: 3px solid #73AD21;
}

div.static {
    position: static;
    border: 3px solid #73AD21;
}

div.relative {  
    position: relative; /*會跟上面的element保持30px*,relative to its normal position.*/
    top: 30px;
    width: 600px;
    height: 200px;
    border: 3px solid #73AD21; 
}

div.absolute {
    position: absolute;/*( relative to the HTML page.*/
    top: 80px;
    right: 0;
    width: 200px;
    height: 100px;
    border: 3px solid #73AD21;
    /* 根據父容器 而且父容器必須有屬性 position: relative才可以,若沒有父容器,那就是根據body( relative to the HTML page.),is positioned relative to the nearest positioned ancestor
     (instead of positioned relative to the viewport, like fixed).
However; if an absolute positioned element has no positioned ancestors, 
it uses the document body, and moves along with page scrolling.*/
}

div.fixed {
    position: fixed;/*relative to the browser window ,在視窗的哪裡決定後就不會動了*/
    bottom: 0;
    right: 0;
    width: 300px;
    border: 3px solid #73AD21;
    /* 根據視窗(bowser)決定位子,is positioned relative to the viewport, which means it always stays in the same place
     even if the page is scrolled. The top, right,
      bottom, and left properties are used to position the element.
A fixed element does not leave a gap in the page where it would normally have been located.
Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used:*/
}

div.sticky { /*根據滾輪移動,和fixed有點不同, is positioned based on the user's scroll position.
    A sticky element toggles between relative and fixed, depending on the scroll position.
    It is positioned relative until a given offset position is met in the viewport -
    then it "sticks" in place (like position:fixed).*/
    position: -webkit-sticky;
    position: sticky;
    top: 0; /*top, right, bottom or left 必須指定一個*/
    padding: 5px;
    background-color: #cae8ca;
    border: 2px solid #4CAF50;
    /* You must also specify at least one of top, right, 
    bottom or left for sticky positioning to work.*/
  }

  img.absoluteimg{
    position: absolute;
    left:0;
        z-index: -1;
}

div.overflowvisible {
    background-color: #eee;
    width: 200px;
    height: 50px;
    border: 1px dotted black;
    overflow: visible;
}

div.overflowhidden{
    background-color: #eee;
    width: 200px;
    height: 50px;
    border: 1px dotted black;
    overflow: hidden;
}

div.overflowscroll {
    background-color: #eee;
    width: 200px;
    height: 100px;
    border: 1px dotted black;
    overflow: scroll;
}

div.overflowauto{ 
    /*The auto value is similar to scroll,
     only it add scrollbars when necessary:*/
    background-color: #eee;
    width: 200px;
    height: 50px;
    border: 1px dotted black;
    overflow: auto;
}

div.overflo_x_y {
    background-color: #eee;
    width: 200px;
    height: 50px;
    border: 1px dotted black;
    overflow-x: hidden;
    overflow-y: scroll;
}

img.floatright {
    float: right;
}

img.floatleft{
    float: left;
}

img.floatnone{
    float: none;
}

.div3left {
    float: left;
    width: 100px;
    height: 50px;
    margin: 10px;
    border: 3px solid #73AD21;
}

.div4clear {
    /*The most common way to use the clear property is after you have used
     a float property on an element.*/
    border: 1px solid red;
    clear: left;
}


.clearfix {
    overflow: auto;
}

.imgclearfixright {
    float: right;
}

.clearfixclearbothtable::after {
    content: "";
    clear: both;
    display: table;
}


* {
    box-sizing: border-box;
}

.gridbox {
    float: left;
    width: 33.33%;
    padding: 50px;
    vertical-align: middle;
    text-align: center;
}

.gridclearfix::after {
    content: "";
    clear: both;
    display: table;
}


.img_container {
    float: left;
    width: 33.33%;
    height:300px;
    padding: 1px;
}

.clearfiximg::after {
    content: "";
    clear: both;
    display: table;
}

.flex-container {
    display: flex;
    flex-wrap: nowrap;
    background-color: DodgerBlue;
  }
  
  .flex-container .box {
    background-color: #f1f1f1;
    width: 50%;
    margin: 10px;
    text-align: center;
    line-height: 75px;
    font-size: 30px;
  }


  span.a {
    display: inline; /* the default for span */
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;    
    background-color: yellow; 
}

span.b {
    display: inline-block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;        
    background-color: yellow; 
}

span.c {
    display: block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid blue;        
    background-color: yellow; 
}


.nav {
    background-color: yellow; 
    list-style-type: none;
    text-align: center;
    margin: 0;
    padding: 0;
}

.nav li.abcd {
    display: inline-block;
    font-size: 20px;
    padding: 20px;
}

.centermarginauto {
    /*Center aligning has no effect if the width 
    property is not set (or set to 100%).*/
    margin: auto;
    width: 60%;
    border: 3px solid #73AD21;
    padding: 10px;
}  

.centertext_align_center {
    text-align: center;
    border: 3px solid green;
}

.image_block_margin_leftright_auto{
    border:5px solid red ;
    display: block;
    margin-left: auto;
    margin-right: auto;
    width:30%;
}

.right_align_absolute{
    position: absolute;
    right: 0px;
    width: 300px;
    border: 3px solid #73AD21;
    padding: 10px;
}

.right_float_align{/*If an element is taller than the element containing it, 
    and it is floated, it will overflow outside of its container.
    You can use the "clearfix" hack to fix this (see example below).
    overflow:auto;*/
    float: right;
    width: 300px;
    border: 3px solid #73AD21;
    padding: 10px;
}

.padding_and_textalignTocenter{
    padding: 70px 0;
    border: 3px solid green;
    text-align: center;
}

.center_uselineheight{
    line-height: 200px;
    height: 200px;
    border: 3px solid red;
    text-align: center;
}

.center_uselineheight p{
    line-height: 1.5;
    display: inline-block;
    vertical-align: middle;
}

.center_useposition_transform{ 
    height: 200px;
    position: relative;
    border: 3px solid green; 
}

.center_useposition_transform p {
    margin: 0;
    position: absolute;
    top: 50%;
    left: 50%;
    /*translaste(x,y) 從原來位置移動x和y*/
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
}

.Descendantselect p {/*("space"),在class中的p都算,
    不一定要第一代直系(沒有被其他element包在裡面)*/
    background-color: yellow;
}

.ChildSelect > p { /*(">")在class中且一定要第一代直系才算*/ 
    background-color: yellow;
}

.AdjacentSiblingSelect + p {/*("+"),在class外的第一個直系*/
    background-color: yellow;
}


/*
.GeneralSibingSelect ~ p {/*("~"),在class外所有第一個直系
    background-color: yellow;
}*/


/*pseudo code*/


/* unvisited link */
a.anchor:link {
    color: red;
}

/* visited link */
a.anchor:visited {
    color: green;
}

/* mouse over link */
a.anchor:hover { /*上面必須先定義:link or :visited */
    color: hotpink;
}

/* selected link */
a.anchor:active { /*上面必須先定義:hover*/
    color: blue;
}

.divhover {
    background-color: green;
    color: white;
    padding: 25px;
    text-align: center;
}
.divhover:hover {
    background-color: blue;
}

.hoverTochange_p p { /*先隱藏起來*/
    display: none;
    background-color: yellow;
    padding: 20px;
}

.hoverTochange_p:hover p { /*hover再出來 */
    display: block;
}

p.elementfirst-child_is_p:first-child {/* body p:first-child(在body之下第個小孩是p的話)
    he selector matches any <p> element that is the first child of any element:
    所有element下第一個小孩是 p 元素的就...*/
    color: blue;
}

p.pelementfirst-child_is_i i:first-child { 
    /* the selector matches the first <i> element in all <p> elements:
    所有p element下的 第一個是i element 就...*/
    color: blue;
} 

p.All_Ielement_under_p:first-child i {
    /* 在第一個p element之下的所有 i element就...*/
    color: blue;
} 


q:lang(no) { /*:lang pseudo-class allows you to define special rules for different languages.
    給新的定義*/
    quotes: "~" "~";
}

input.Pseudo_class_focus:focus  { /*clicked or actived*/
    background-color:lightblue;
   }

p.Pseudo_elementfirst_line::first-line {
    color: #ff0000;
    font-variant: small-caps;
    /*::first-line pseudo-element can only be applied to block-level elements.*/
}

p.Pseudo_elementfirst_letter::first-letter {
    color: #ff0000;
    font-size: xx-large;
    /* can only be applied to block-level elements.*/
}

h1.Pseudo_element_before::before {
    content: url(saber.png);
}

h1.Pseudo_element_after::after {
    content: url(saber.png);
}

::-moz-selection { /* Code for Firefox */
    color: red;
    background: yellow;
}

::selection { /*selected by userd*/
    color: red;
    background-color: yellow;
}
/*Pseudo_element////////////////////////////////////////////////////*/
/*opacity////////////////////////////////////////////////////*/

img.opacity {
    opacity: 0.5;
    filter: alpha(opacity=50); /* For IE8 and earlier */
}
img.opacity:hover {
    opacity: 1.0;
    filter: alpha(opacity=100); /* For IE8 and earlier */
}

div {
    background-color: #4CAF50;
    padding: 10px;
}

div.first {
    opacity: 0.1;
    filter: alpha(opacity=10); /* For IE8 and earlier */
}

div.second {
    opacity: 0.3;
    filter: alpha(opacity=30); /* For IE8 and earlier */
}

div.third {
    opacity: 0.6;
    filter: alpha(opacity=60); /* For IE8 and earlier */
}

div.rgba {
    background: rgb(76, 175, 80);
    padding: 10px;
}

div.rgbafirst {
    background: rgba(76, 175, 80, 0.1);
}

div.rgbasecond {
    background: rgba(76, 175, 80, 0.3);
}

div.rgbathird {
    background: rgba(76, 175, 80, 0.6);
}

div.background {
    background: url(saber.png) repeat;
    border: 2px solid black;
  }
  
  div.transbox {
    margin: 30px;
    background-color: #ffffff;
    border: 1px solid black;
    opacity: 0.6;
    filter: alpha(opacity=60); /* For IE8 and earlier */
  }
  
  div.transbox p {
    margin: 5%;
    font-weight: bold;
    color: #000000;
  }



  /*  Attribute Selectors/////////////////////////////////////////////////;*/
a[target] {
    background-color: yellow;/*attribue 是target的*/
}
a[target=_blank] {
    background-color: yellow;/*attribue 是target =_blank 的*/
}
[title~=flower] { /*attribue 是title =~flower  有red就可以的(但是red要獨立出來)*/
    border: 5px solid yellow;
}

[class|=top] {/*attribue class(不一定要是class) = top or top-的*/
    background: yellow;
}

[class^="top"] {/*attribue class 開頭是 top 就可以*/
    background: yellow;
}
[class$="test"] {/*結尾是 test 就可以*/
    background: yellow;
}
[class*="te"] {/*中間有 te 就可以*/
    background: yellow;
}
input[type="text"] {
    width: 150px;
    display: block;
    margin-bottom: 10px;
    background-color: yellow;
}

input[type="button"] {
    width: 120px;
    margin-left: 35px;
    display: block;
}

/*  Attribute Selectors/////////////////////////////////////////////////;*/


input[type=text] {
    width: 130px;
    box-sizing: border-box;
    border: 2px solid #ccc;
    border-radius: 4px;
    font-size: 16px;
    background-color: white;
    background-image: url('searchicon.png');
    background-position: 10px 10px; 
    background-repeat: no-repeat;
    padding: 12px 20px 12px 40px;
    -webkit-transition: width 0.4s ease-in-out;
    transition: width 0.4s ease-in-out;

}/*伸縮特效*/

input[type=text]:focus {
    width: 100%;
}
select { /*配option用*/
    width: 100%;
    padding: 16px 20px;
    border: none;
    border-radius: 4px;
    background-color: #f1f1f1;
}




  /*  Grid/////////////////////////////////////////////////;*/
.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }

.grid-container {
  display: grid;
  grid-template-areas:
    'header header header header header header'
    'menu main main main right right'
    'menu footer footer footer footer footer';
  grid-gap: 10px;
  background-color: #2196F3;
  padding: 10px;
}
.grid-container > div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}



